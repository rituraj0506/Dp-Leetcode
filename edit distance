class Solution {
public:
    int f(int i,int j,string &s,string &s1,vector<vector<int>>&dp)
    {
        if(i<0) return j+1;
        if(j<0) return i+1;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i]==s1[j])
            return dp[i][j]= 0+f(i-1,j-1,s,s1,dp);
        else
        {
          return dp[i][j]= min( 1+f(i,j-1,s,s1,dp),min(1+f(i-1,j,s,s1,dp), 1+f(i-1,j-1,s,s1,dp)));
             
        }
    }
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return f(n-1,m-1,word1,word2,dp);
    }
};

/* Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')*/
