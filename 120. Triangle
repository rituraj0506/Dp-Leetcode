Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, 
you may move to either index i or index i + 1 on the next row.

Example 1:
Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).


prev que ha fix start and end point but here end points are varing


 int fun(int i,int j,vector<vector<int>>& triangle, vector<vector<int>>&dp)
    {
        int n=triangle.size();
        if(i==n-1) return triangle[n-1][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int d=fun(i+1,j,triangle,dp)+triangle[i][j];
        int dia=fun(i+1,j+1,triangle,dp)+triangle[i][j];
        return dp[i][j]=min(d,dia);
    }
    int minimumTotal(vector<vector<int>>& triangle) {
      int n=triangle.size();
        vector<vector<int>>dp(n,vector<int>(n,-1));
        return fun(0,0,triangle,dp);
    }

// in this prob st pt is fix but end point is not fix ending point ia any no in last row 
//so we st from fix pt in array it does not go out of bound 

t(c)=o(n*N)
s(c)=o(n);
